# 开发阶段项目setting.py 文件

"""
Django settings for meiduo_mail project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os, sys
import pathlib
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# sys.path.insert(0, pathlib.Path.joinpath(pathlib.Path.cwd(), "apps"))
# 追加系统的导报路径（目的：1，注册子应用时可以写的方便点. 2.修改django认证模型类时，必须以 应用名.模型名）
# sys.path.insert(0, BASE_DIR / "apps")
# 上面的拼接路径好像不适用
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# print(sys.path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ukpv2cv_n5y2=emx6ob@^$uq$2ar2u$v*cg!ve)t8p$*ngl^y9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "rest_framework",  # DRF
    "users",  # 用户模块
    # "users.apps.UsersConfig",  # 上面的写法和当前的均可 用户模块
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meiduo_mail.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo_mail.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'HOST': '192.168.112.129',  # 数据库主机
        'PORT': 3306,  # 数据库端口
        'USER': 'meiduo',  # 数据库用户名root
        'PASSWORD': "meiduo",  # 数据库用户密码
        'NAME': 'meiduo_24',  # 数据库名字
        # "ATOMIC_REQUESTS": True  # 全局生效自动提交事务
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 配置redis 数据库作为缓存后端
CACHES = {
    # 默认的Redis配置项，采用0号Redis库
    "default": {  # 默认 缓存省市区数据
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # session存储机制,采用0号Redis库
    "session": {  # 缓存session
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 验证码的Redis配置项，采用2号Redis库
    "verify_codes": { # 存储验证码
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # 是否禁用已经存在的日志器
    "formatters": {  # 日志信息显示的格式
        "verbose": {  # levelname 日志级别，asctime 时间， module 模块， lineno 具体行， message输出信息
            "format": "%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s"
        },
        "simple": {
            "format": "%(levelname)s %(module)s %(lineno)d %(message)s"
        },
    },
    "filters": {  # 对日志进行过滤
        "require_debug_true": {  # django 在debug模式下才输出日志
            '()': "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {  # 日志处理方式
        "console": {  # 向终端中输出日志
            "level": "INFO",
            # "class": "logging.handlers.RotatingFileHandler",
            "class": "logging.StreamHandler",
            "filters": ["require_debug_true"],  # debug为true的时才向终端输出
            "formatter": "simple"  # 即使用上面的配置
        },
        "file": {  # 向文件中输出日志，这里没有使用"filters"，即表明开发，生产环境都生产日志输出
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            # "filename": os.path.join(os.path.dirname(BASE_DIR), "logs/meiduo.log"),  # 日志文件的位置
            "filename": BASE_DIR.parent / "logs/meiduo.log",  # 日志文件的位置
            "maxBytes": 300 * 1024 * 1024,  # 1024 * 1024即1M，这里配置了300M的日志输出空间额度
            "backupCount": 10,
            "formatter": "verbose"  # 即使用上面的属性信息格式配置
        }
    },
    "loggers": {  # 日志器
        "django": {  # 定义了一个名为django 的日志器, 和django结合起来使用，将django中之前的日志输出内容的时候，按照我们的日志配置进行输出
            "handlers": ["console", "file"],  # 可以同时向终端与文件中输出日志,将来项目上线，把console去掉
            "propagete": True,  # 是否继续传递日志信息
            "level": "INFO",  # 日志器接收的最低日志级别
        }
    }
}

# DRF 配置项
REST_FRAMEWORK = {
    # 异常处理
    "EXCEPTION_HANDLER": "meiduo_mail.utils.exceptions.exception_handler",
}

# 修改Django 认证系统的用户模型类
AUTH_USER_MODEL = "users.User"
